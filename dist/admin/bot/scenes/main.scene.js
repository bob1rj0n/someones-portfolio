"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mainScene = void 0;
const tslib_1 = require("tslib");
const telegraf_1 = require("telegraf");
const message_service_1 = require("../../service/message.service");
const sceneNames_1 = require("../../../common/constant/sceneNames");
const moment_1 = tslib_1.__importDefault(require("moment"));
exports.mainScene = new telegraf_1.Scenes.BaseScene(sceneNames_1.SceneNames.MAIN);
exports.mainScene.enter(async (ctx) => {
    let buttons = [];
    buttons.push([telegraf_1.Markup.button.callback("✉ allmessages", "✉")]);
    ctx.reply("Asosiy menu", telegraf_1.Markup.keyboard(buttons).resize(true));
});
exports.mainScene.hears(/✉/, async (ctx) => {
    let page = 1;
    ctx.session.page = page;
    console.log(ctx.session);
    let buttons = [];
    buttons.push([telegraf_1.Markup.button.callback("⏭", "⏭")]); //Markup.button.callback("⏮", "⏮"),
    const messages = await (0, message_service_1.getMessagesByPaging)(ctx.session.page);
    let arr = [`${ctx.session.page}-sahifa`], x = 1, msg;
    for (const msg of messages) {
        let item = `\n\n${x}:  Fullname: ${msg.name},\nPhone: ${msg.phoneNumber},\nSubject: ${msg.subject},\nMessage: ${msg.message},\nVaqt: ${(0, moment_1.default)(msg.createdAt).format("YYYY-MM-DD HH:mm")}`;
        arr.push(item);
        x++;
    }
    msg = arr.toString().length > 0 ? arr.toString() : `${ctx.session.page}-sahifa\nHech narsa topilmadi!`;
    await ctx.reply(msg, telegraf_1.Markup.inlineKeyboard(buttons));
    await ctx.scene.enter(sceneNames_1.SceneNames.MAIN);
});
exports.mainScene.action(/⏮/, async (ctx) => {
    ctx.session.page = ctx.session.page - 1 > 1 ? ctx.session.page - 1 : 1;
    console.log(ctx.session);
    let buttons = [];
    ctx.session.page == 1
        ? buttons.push([telegraf_1.Markup.button.callback("⏭", "⏭")])
        : buttons.push([telegraf_1.Markup.button.callback("⏮", "⏮"), telegraf_1.Markup.button.callback("⏭", "⏭")]);
    const messages = await (0, message_service_1.getMessagesByPaging)(ctx.session.page);
    let arr = [`${ctx.session.page}-sahifa`], x = 1, msg;
    for (const msg of messages) {
        let item = `\n\n${x}:  Fullname: ${msg.name},\nPhone: ${msg.phoneNumber},\nSubject: ${msg.subject},\nMessage: ${msg.message},\nVaqt: ${(0, moment_1.default)(msg.createdAt).format("YYYY-MM-DD HH:mm")}`;
        arr.push(item);
        x++;
    }
    msg = arr.toString();
    await ctx.editMessageText(msg, { reply_markup: { inline_keyboard: (buttons) } });
});
exports.mainScene.action(/⏭/, async (ctx) => {
    let buttons = [];
    ctx.session.page++;
    console.log(ctx.session);
    const messages = await (0, message_service_1.getMessagesByPaging)(ctx.session.page);
    messages.length > 0
        ? buttons.push([telegraf_1.Markup.button.callback("⏮", "⏮"), telegraf_1.Markup.button.callback("⏭", "⏭")])
        : buttons.push([telegraf_1.Markup.button.callback("⏮", "⏮")]);
    let arr = [`${ctx.session.page}-sahifa`], x = 1, msg;
    for (const msg of messages) {
        let item = `\n\n${x}:  Fullname: ${msg.name},\nPhone: ${msg.phoneNumber},\nSubject: ${msg.subject},\nMessage: ${msg.message},\nVaqt: ${(0, moment_1.default)(msg.createdAt).format("YYYY-MM-DD HH:mm")}`;
        arr.push(item);
        x++;
    }
    msg = messages.length > 0 ? arr.toString() : `${ctx.session.page}-sahifa\nHech narsa topilmadi!`;
    await ctx.editMessageText(msg, { reply_markup: { inline_keyboard: (buttons) } });
});
//# sourceMappingURL=data:application/json;base64,