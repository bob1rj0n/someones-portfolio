"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.botPlugin = exports.bot = void 0;
const tslib_1 = require("tslib");
const fastify_plugin_1 = tslib_1.__importDefault(require("fastify-plugin"));
const mongoose_1 = tslib_1.__importDefault(require("mongoose"));
const telegraf_1 = require("telegraf");
const telegraf_session_mongodb_1 = require("telegraf-session-mongodb");
const config_1 = require("../../common/config/config");
const sceneNames_1 = require("../../common/constant/sceneNames");
const main_scene_1 = require("./scenes/main.scene");
exports.bot = new telegraf_1.Telegraf(config_1.ENV.BOT_TOKEN);
const stages = new telegraf_1.Scenes.Stage([
    main_scene_1.mainScene,
]);
async function botStart(ctx) {
    try {
        console.log("ctx : ", ctx.from);
        if (ctx.from.id == 1526937684) { //651985244
            return await ctx.scene.enter(sceneNames_1.SceneNames.MAIN);
        }
    }
    catch (error) {
        console.log("Error at bot plugin:\n", error);
    }
}
stages.command('start', botStart);
async function plugin(server, opt, done) {
    server.post("/" + config_1.ENV.BOT_TOKEN, (req, res) => res.reply({ root: true }));
    exports.bot.use((0, telegraf_session_mongodb_1.session)(mongoose_1.default.connection.db, { collectionName: "sessions", sessionName: "session" }));
    exports.bot.use(stages.middleware());
    await server.register(require("@fastify/middie"));
    await server.register(exports.bot.webhookCallback("/" + config_1.ENV.BOT_TOKEN));
    // await bot.telegram.setWebhook(BOT_SERVER_URL + "/" + BOT_TOKEN)
    exports.bot.start(async (ctx) => {
        await botStart(ctx);
    });
    exports.bot.launch();
    done();
}
exports.botPlugin = (0, fastify_plugin_1.default)(plugin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm90UGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FkbWluL2JvdC9ib3RQbHVnaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDRFQUFnQztBQUNoQyxnRUFBZ0M7QUFDaEMsdUNBQXFEO0FBQ3JELHVFQUFtRDtBQUNuRCx1REFBaUQ7QUFDakQsaUVBQThEO0FBQzlELG9EQUFnRDtBQVFuQyxRQUFBLEdBQUcsR0FBRyxJQUFJLG1CQUFRLENBQVksWUFBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBRXpELE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQU0sQ0FBQyxLQUFLLENBQVk7SUFDdkMsc0JBQVM7Q0FDWixDQUFDLENBQUE7QUFFRixLQUFLLFVBQVUsUUFBUSxDQUFDLEdBQUc7SUFDdkIsSUFBSTtRQUNBLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLFVBQVUsRUFBRSxFQUFDLFdBQVc7WUFDdkMsT0FBTyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHVCQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEQ7S0FDSjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxLQUFLLENBQUMsQ0FBQTtLQUMvQztBQUNMLENBQUM7QUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQTtBQUVqQyxLQUFLLFVBQVUsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxZQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDekUsV0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFBLGtDQUFPLEVBQUMsa0JBQVEsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRWhHLFdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7SUFFNUIsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUE7SUFFakQsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQUcsQ0FBQyxlQUFlLENBQUMsR0FBRyxHQUFHLFlBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0lBRS9ELGtFQUFrRTtJQUVsRSxXQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUNwQixNQUFNLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNaLElBQUksRUFBRSxDQUFBO0FBQ1YsQ0FBQztBQUVZLFFBQUEsU0FBUyxHQUFHLElBQUEsd0JBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcCBmcm9tIFwiZmFzdGlmeS1wbHVnaW5cIjtcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xyXG5pbXBvcnQgeyBDb250ZXh0LCBTY2VuZXMsIFRlbGVncmFmIH0gZnJvbSBcInRlbGVncmFmXCI7XHJcbmltcG9ydCB7IHNlc3Npb24gfSBmcm9tIFwidGVsZWdyYWYtc2Vzc2lvbi1tb25nb2RiXCI7XHJcbmltcG9ydCB7IEVOViB9IGZyb20gXCIuLi8uLi9jb21tb24vY29uZmlnL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBTY2VuZU5hbWVzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb25zdGFudC9zY2VuZU5hbWVzXCI7XHJcbmltcG9ydCB7IG1haW5TY2VuZSB9IGZyb20gXCIuL3NjZW5lcy9tYWluLnNjZW5lXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE15Q29udGV4dCBleHRlbmRzIENvbnRleHQge1xyXG4gICAgc2Vzc2lvbjogYW55O1xyXG4gICAgc2NlbmU6IFNjZW5lcy5TY2VuZUNvbnRleHRTY2VuZTxNeUNvbnRleHQ+O1xyXG4gICAgS2FtaW5hOiBcIlByb2dyYW1tZXJcIlxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYm90ID0gbmV3IFRlbGVncmFmPE15Q29udGV4dD4oRU5WLkJPVF9UT0tFTilcclxuXHJcbmNvbnN0IHN0YWdlcyA9IG5ldyBTY2VuZXMuU3RhZ2U8TXlDb250ZXh0PihbXHJcbiAgICBtYWluU2NlbmUsXHJcbl0pXHJcblxyXG5hc3luYyBmdW5jdGlvbiBib3RTdGFydChjdHgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJjdHggOiBcIiwgY3R4LmZyb20pO1xyXG4gICAgICAgIGlmIChjdHguZnJvbS5pZCA9PSAxNTI2OTM3Njg0KSB7Ly82NTE5ODUyNDRcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGN0eC5zY2VuZS5lbnRlcihTY2VuZU5hbWVzLk1BSU4pXHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGF0IGJvdCBwbHVnaW46XFxuXCIsIGVycm9yKVxyXG4gICAgfVxyXG59XHJcbnN0YWdlcy5jb21tYW5kKCdzdGFydCcsIGJvdFN0YXJ0KVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcGx1Z2luKHNlcnZlciwgb3B0LCBkb25lKSB7XHJcbiAgICBzZXJ2ZXIucG9zdChcIi9cIiArIEVOVi5CT1RfVE9LRU4sIChyZXEsIHJlcykgPT4gcmVzLnJlcGx5KHsgcm9vdDogdHJ1ZSB9KSlcclxuICAgIGJvdC51c2Uoc2Vzc2lvbihtb25nb29zZS5jb25uZWN0aW9uLmRiLCB7IGNvbGxlY3Rpb25OYW1lOiBcInNlc3Npb25zXCIsIHNlc3Npb25OYW1lOiBcInNlc3Npb25cIiB9KSlcclxuXHJcbiAgICBib3QudXNlKHN0YWdlcy5taWRkbGV3YXJlKCkpXHJcblxyXG4gICAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKHJlcXVpcmUoXCJAZmFzdGlmeS9taWRkaWVcIikpXHJcblxyXG4gICAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGJvdC53ZWJob29rQ2FsbGJhY2soXCIvXCIgKyBFTlYuQk9UX1RPS0VOKSlcclxuXHJcbiAgICAvLyBhd2FpdCBib3QudGVsZWdyYW0uc2V0V2ViaG9vayhCT1RfU0VSVkVSX1VSTCArIFwiL1wiICsgQk9UX1RPS0VOKVxyXG5cclxuICAgIGJvdC5zdGFydChhc3luYyAoY3R4KSA9PiB7XHJcbiAgICAgICAgYXdhaXQgYm90U3RhcnQoY3R4KVxyXG4gICAgfSk7XHJcblxyXG4gICAgYm90LmxhdW5jaCgpXHJcbiAgICBkb25lKClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGJvdFBsdWdpbiA9IGZwKHBsdWdpbik7XHJcbiJdfQ==